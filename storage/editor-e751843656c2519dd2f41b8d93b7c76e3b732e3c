{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":0,"width":1920,"height":1080},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/ricardo/workspace/stockat","buffers":[{"text":"# Make a consolidation of stock\nclass ConsolidationsController < ApplicationController\n  load_and_authorize_resource\n  before_filter :find_model, except: [:index]\n\n  def index\n    @consolidation = Consolidation.new\n    @last_consolidations = Consolidation.order(created_at: :desc).limit(5)\n  end\n\n  def products_by_raw_material\n    if !params[:raw_material_id].empty?\n      @raw_material = RawMaterial.find(params[:raw_material_id])\n      @consolidation = Consolidation.new\n    end\n\n    render partial: \"raw_material_list\", content_type: \"text/html\"\n  end\n\n  def create\n    @consolidation = Consolidation.new(consolidation_params)\n    @products = []\n\n    params[:consolidation][:products].each do |p|\n      hash_product = {}\n\n      @product = Product.find(p[:product_id])\n      @quantity = p[:quantity].to_i\n\n      hash_product[:product_id] = @product.id\n      hash_product[:quantity] = @quantity\n\n      @product_quantity = StockInput.where(product_id: @product.id).sum(\"quantity - quantity_used\")\n\n      if @quantity > @product_quantity\n        @stock_input = include_product_stock(@quantity - @product_quantity, @product)\n        hash_product[:rectification_id] = @stock_input.id\n        hash_product[:rectification_type] = @stock_input.class.name\n      elsif @quantity < @product_quantity\n        @stock_output = remove_product_stock(@product_quantity - @quantity, @product)\n        hash_product[:rectification_id] = @stock_output.id\n        hash_product[:rectification_type] = @stock_output.class.name\n      end\n      @products << hash_product\n    end\n\n    @consolidation.products = @products\n\n    if @consolidation.save\n      redirect_to consolidations_path, notice: t(\"flash.consolidations.create.notice\")\n    end\n  end\n\n  private\n    #\n    # Include a product on stock if on consolidation there is less than in stock.\n    #\n    # @param quantity [Fixnum] quantity to include on stock\n    # @param product [Product] product to include on stock\n    # @return [StockInput] the stock_input recently included\n    #\n    def include_product_stock(quantity, product)\n      @last_product = StockInput.where(product_id: @product.id).order(:expiration_date).last\n      stock_input = StockInput.new\n\n      stock_input.quantity = quantity\n      stock_input.quantity_used = 0\n      stock_input.expiration_date = @last_product.expiration_date\n      stock_input.product = product\n      stock_input.raw_material = product.raw_material\n      stock_input.unit = current_unit\n      stock_input.supplier = @last_product.supplier\n      stock_input.cost_center = @last_product.cost_center\n      stock_input.unit_price = @last_product.unit_price\n\n      stock_input.save!\n\n      stock_input\n\n    end\n\n    #\n    # Remove a product on stock if on consolidation there is greater than in stock.\n    #\n    # @param quantity [Fixnum] quantity to remove on stock\n    # @param product [Product] product to remove on stock\n    # @return [StockOutput] the stock_output recently removed\n    #\n    def remove_product_stock(quantity, product)\n      stock_output = StockOutput.new(quantity: quantity)\n\n      stock_output.reason = \"4\"\n\n      removing_product = RemovingProduct.new(product, quantity)\n      removing_product.remove\n\n      stock_output.save!\n      stock_output.stock_inputs_stock_outputs.create(removing_product.stock_inputs_used)\n      stock_output\n\n    end\n\n    def find_model\n      @consolidation = Consolidation.find(params[:id]) if params[:id]\n    end\n\n    def consolidation_params\n      params\n        .require(:consolidation)\n        .permit(:raw_material_id)\n    end\nend\n","markers":{"markers":{"1":{"id":1,"range":[[15,0],[15,0]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":90,"preserveFolds":true,"goalBufferRange":null},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[{"patches":[{"id":1,"oldParams":{"tailed":false},"newParams":{"tailed":true},"deserializer":"MarkerPatch"},{"oldRange":[[15,0],[15,0]],"newRange":[[15,0],[16,0]],"oldText":"","newText":"\n","normalizeLineEndings":true,"markerPatches":{},"deserializer":"BufferPatch"},{"id":1,"oldParams":{"range":[[15,0],[16,0]]},"newParams":{"range":[[15,0],[15,0]]},"deserializer":"MarkerPatch"},{"id":1,"oldParams":{"tailed":true},"newParams":{"tailed":false},"deserializer":"MarkerPatch"}],"deserializer":"Transaction"}],"deserializer":"History"},"filePath":"/Users/ricardo/workspace/stockat/app/controllers/consolidations_controller.rb","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"af8113a2ab232488874f2383b353707df95dbe24","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":90,"softTabs":true,"scrollTop":0,"scrollLeft":0,"displayBuffer":{"id":91,"softWrap":false,"editorWidthInChars":120,"tokenizedBuffer":{"bufferPath":"/Users/ricardo/workspace/stockat/app/controllers/consolidations_controller.rb","tabLength":2,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/ricardo/workspace/stockat/app/controllers/consolidations_controller.rb","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":true,"deserializer":"Workspace"},"packageStates":{"fuzzy-finder":{"/Users/ricardo/workspace/stockat/app/controllers/consolidations_controller.rb":1395853615214},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":1996513},"tree-view":{"directoryExpansionStates":{"app":{"controllers":{}}},"selectedPath":"/Users/ricardo/workspace/stockat/app/controllers/consolidations_controller.rb","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":267}}}